%{

#include <string.h>
#include <reg/parser.h>
#include <reg/syntax.h>

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-function"
#endif

#define YYSTYPE ASTNode*
#define YY_CTX_LOCAL 1
#define YY_CTX_MEMBERS \
  char *ptr; \
  ASTNode *root;

#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
  int yyc = EOF; \
  if(ctx->ptr && *(ctx->ptr) != '\0') { \
    yyc= *ctx->ptr;                           \
    ctx->ptr++; \
  } \
  result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1); \
}

%}
  start = e:expression { $$ = yy->root = e; }

  expression = e:literal { $$ = e }
               ( f:expression )* { $$ = (ASTNode*)ASTConcatenate_create(e, f); }

  literal = <[a-zA-Z]> { $$= (ASTNode*)ASTLiteral_create(yytext[0]); }

%%

ASTNode*
parse(char *string)
{
  if(strlen(string) == 0) return (ASTNode*)ASTEmpty_create();

  yycontext yy;
  memset(&yy, 0, sizeof(yy));

  yy.ptr = string;

  while (yyparse(&yy));

  ASTNode *result = yy.root;

  yyrelease(&yy);
  return result;
}

#ifdef __clang__
#pragma clang diagnostic pop
#endif

